generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role          @default(USER)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  dataSources   DataSource[]
  documents     Document[]
  groups        GroupMember[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  documents   Document[]
  members     GroupMember[]
}

model GroupMember {
  id       String    @id @default(cuid())
  userId   String
  groupId  String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Document {
  id         String             @id @default(cuid())
  title      String
  content    String?
  filePath   String?
  fileSize   Int?
  mimeType   String?
  isActive   Boolean            @default(true)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  authorId   String
  groupId    String?
  categoryId String?
  author     User               @relation(fields: [authorId], references: [id])
  category   DocumentCategory?  @relation(fields: [categoryId], references: [id])
  group      Group?             @relation(fields: [groupId], references: [id])
  properties DocumentProperty[]
}

model DocumentCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  documents   Document[]
}

model DocumentProperty {
  id         String   @id @default(cuid())
  key        String
  value      String
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, key])
}

model DataSource {
  id               String         @id @default(cuid())
  name             String
  type             DataSourceType
  connectionString String?
  host             String?
  port             Int?
  database         String?
  username         String?
  password         String?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdById      String
  createdBy        User           @relation(fields: [createdById], references: [id])
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum DataSourceType {
  MYSQL
  POSTGRESQL
  MONGODB
  REDIS
  ELASTICSEARCH
  API
}
